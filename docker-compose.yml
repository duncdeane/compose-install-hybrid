version: '2.2'

networks:
  kong-edu-net:
    name: kong-edu-net
    driver: bridge

services:
  db:
    networks:
      - kong-edu-net
    image: postgres:13.1
    container_name: db
    hostname: db
    environment:
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_USER: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true

  kong-migrations:
    networks:
      - kong-edu-net
    image: ${KONG_IMAGE:-kong:latest}
    container_name: kong-migrations
    hostname: kong-migrations
    command: kong migrations bootstrap
    environment:
      #KONG_LICENSE_PATH: ${KONG_LICENSE_PATH}
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PASSWORD: ${KONG_ADMIN_TOKEN}
    restart: on-failure

  kong-cp:
    networks:
      - kong-edu-net
    image: ${KONG_IMAGE:-kong:latest}
    container_name: kong-cp
    hostname: kong-cp
    user: "${KONG_USER:-kong}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/var/log/kong
      - ./ssl-certs:/usr/local/kong/ssl
      - ./kgo:/usr/local/kong/license
    environment:
      #KONG_LICENSE_PATH: ${KONG_LICENSE_PATH}
      KONG_ROLE: control_plane
      KONG_CLUSTER_CERT: /usr/local/kong/ssl/hybrid/cluster.crt
      KONG_CLUSTER_CERT_KEY: /usr/local/kong/ssl/hybrid/cluster.key
      KONG_CLUSTER_DATA_PLANE_PURGE_DELAY: 600
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 http2 ssl"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002, 0.0.0.0:8445 http2 ssl"
      KONG_PORTAL_GUI_LISTEN: "0.0.0.0:8003, 0.0.0.0:8446 http2 ssl"
      KONG_PORTAL_API_LISTEN: "0.0.0.0:8004, 0.0.0.0:8447 http2 ssl"
      KONG_STATUS_LISTEN: "0.0.0.0:8100 ssl"
      KONG_CLUSTER_LISTEN: "0.0.0.0:8005"
      KONG_CLUSTER_TELEMETRY_LISTEN: "0.0.0.0:8006"
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_MAX_CONCURRENT_QUERIES: 5
      KONG_ADMIN_ACCESS_LOG: /var/log/kong/admin_access.log
      KONG_ADMIN_ERROR_LOG: /var/log/kong/error_access.log
      KONG_ADMIN_GUI_ACCESS_LOG: /var/log/kong/admingui_access.log
      KONG_ADMIN_GUI_ERROR_LOG: /var/log/kong/admingui_error.log
      KONG_PORTAL_API_ACCESS_LOG: /var/log/kong/portalapi_access.log
      KONG_PORTAL_API_ERROR_LOG: /var/log/kong/portalapi_error.log
      KONG_PORTAL_GUI_ACCESS_LOG: /var/log/kong/portalgui_access.log
      KONG_PORTAL_GUI_ERROR_LOG: /var/log/kong/portalgui_error.log
      KONG_STATUS_ACCESS_LOG: /var/log/kong/status_access.log
      KONG_STATUS_ERROR_LOG: /var/log/kong/status_error.log
      KONG_LOG_LEVEL: "debug"
      KONG_STATUS_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_STATUS_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_VITALS: "on"
      #To enable Basic Authentication for Kong Manager
      KONG_ENFORCE_RBAC: "on"
      KONG_ADMIN_GUI_AUTH: "basic-auth"
      KONG_ADMIN_GUI_SESSION_CONF: "{ \"cookie_name\": \"manager-session\", \"secret\": \"this_is_my_other_secret\", \"storage\": \"kong\", \"cookie_secure\":false, \"cookie_lifetime\":36000}"
      KONG_ADMIN_API_URI: ${KONG_ADMIN_API_URI:-http://localhost:8001}
      KONG_ADMIN_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_ADMIN_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"
      KONG_ADMIN_GUI_URL: ${KONG_ADMIN_GUI_URL:-http://localhost:8002} 
      KONG_ADMIN_GUI_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_ADMIN_GUI_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_PROTOCOL: "http"
      KONG_PORTAL_GUI_HOST: ${KONG_PORTAL_GUI_HOST:-localhost:8003}
      KONG_PORTAL_GUI_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_PORTAL_GUI_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"
      KONG_PORTAL_API_URL: ${KONG_PORTAL_API_URL:-http://localhost:8004}
      KONG_PORTAL_API_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_PORTAL_API_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"

      #To enable Basic Authentication for the Developer Portal
      KONG_PORTAL_AUTH: "basic-auth"
      KONG_PORTAL_SESSION_CONF: "{\"cookie_name\":\"portal-session\",\"secret\":\"this_is_my_secret\",\"storage\":\"kong\",\"cookie_secure\":true, \"cookie_domain\":\".labs.konghq.com\", \"cookie_samesite\":\"off\"}"
      KONG_PORTAL_EMAIL_VERIFICATION: "off"
      KONG_PORTAL_EMAILS_FROM: "me@example.com"
      KONG_PORTAL_EMAILS_REPLY_TO: "me@example.com"
      KONG_ADMIN_EMAILS_FROM: "me@example.com"
      KONG_ADMIN_EMAILS_REPLY_TO: "me@example.com"
      KONG_SMTP_MOCK: "off"
      KONG_SMTP_ADMIN_EMAILS: "me@example.com"
      KONG_SMTP_HOST: "smtp-server"
      KONG_SMTP_PORT: 1025
      KONG_SMTP_DOMAIN: "api.kong.lan"
      KONG_NGINX_WORKER_PROCESSES: 1
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: "system"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    ports:
      - "8001-8006:8001-8006/tcp"
      - "8100:8100/tcp"
      - "8444-8447:8444-8447/tcp"

  kong-dp:
    networks:
      - kong-edu-net
    image: ${KONG_IMAGE:-kong:latest}
    container_name: kong-dp
    hostname: kong-dp
    depends_on:
      kong-cp:
        condition: service_healthy
    volumes:
      - ./ssl-certs:/usr/local/kong/ssl
      - ./logs:/var/log/kong
    environment:
      KONG_ROLE: "data_plane"
      KONG_CLUSTER_CERT: "/usr/local/kong/ssl/hybrid/cluster.crt"
      KONG_CLUSTER_CERT_KEY: "/usr/local/kong/ssl/hybrid/cluster.key"
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: "/usr/local/kong/ssl/hybrid/cluster.crt,system"
      KONG_CLUSTER_CONTROL_PLANE: "kong-cp:8005"
      KONG_CLUSTER_TELEMETRY_ENDPOINT: "kong-cp:8006"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 http2 ssl"
      KONG_STREAM_LISTEN: "0.0.0.0:5555, 0.0.0.0:5556 ssl reuseport backlog=65536"
      KONG_STATUS_LISTEN: "0.0.0.0:8100"
      KONG_PROXY_ACCESS_LOG: "/var/log/kong/proxy_access.log"
      KONG_PROXY_ERROR_LOG: "/var/log/kong/proxy_error.log"
      KONG_LOG_LEVEL: "debug"
      KONG_DATABASE: "off"
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_VITALS: "on"
      KONG_SSL_CERT_KEY: "/usr/local/kong/ssl/wildcard.key"
      KONG_SSL_CERT: "/usr/local/kong/ssl/wildcard.pem"
      KONG_NGINX_WORKER_PROCESSES: 1
      KONG_TRACING: "on"
      KONG_TRACING_WRITING_STRATEGY: "file"
      KONG_TRACING_TYPES: "all"
      KONG_TRACING_TIME_THRESHOLD: 0
      KONG_TRACING_WRITE_ENDPOINT: /var/log/kong/granular_tracing.log
      KONG_TRACING_DEBUG_HEADER: X-Trace
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    ports:
      - "8000:8000/tcp"
      - "8443:8443/tcp"

  keycloak:
    networks:
    - kong-edu-net
    image: jboss/keycloak:16.1.1
    container_name: keycloak
    hostname: keycloak
    command: -Dkeycloak.profile.feature.upload_scripts=enabled
    volumes:
    - ./keycloak:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://keycloak:8080/auth/realms/master"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    ports:
    - 8080:8080
    environment:
      DB_VENDOR: H2
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_IMPORT: "/data/kong_realm_template3.json"
      PROXY_ADDRESS_FORWARDING: "true"


  deck:
    networks:
      - kong-edu-net
    image: kong/deck:v1.11.0
    container_name: deck
    volumes:
        - ./startup/deck/variant_b:/tmp/shared/deck:ro
    environment:
        DECK_ANALYTICS: "off"
        DECK_KONG_ADDR: "http://kong-cp:8001"
        KONG_ADMIN_TOKEN: ${KONG_ADMIN_TOKEN}
    depends_on:
      kong-cp:
        condition: service_healthy
    entrypoint: ["sh","/tmp/shared/deck/deck_script.sh"]

  httpbin.local:
    networks:
      - kong-edu-net
    image: "kennethreitz/httpbin"
    container_name: httpbin.local
    ports:
      - "8889:80/tcp"

  mockbin.local:
    networks:
    - kong-edu-net
    image: mashape/mockbin:latest
    container_name: mockbin.local
    hostname: mockbin.local
    healthcheck:
      test: ["CMD-SHELL", "exit 0"]
      interval: 30s
      timeout: 30s
      retries: 3        
    restart: on-failure
    ports:
    - "8888:8080/tcp"

  redis:
    networks:
      - kong-edu-net
    container_name: redis
    hostname: redis
    image: redis:latest  