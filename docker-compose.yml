version: '3.8'

volumes:
  kong_data: {}

networks:
  kong-net:
    name: ${NETWORK_NAME:-kong-net}
    driver: bridge

services:

  kong-migrations-bootstrap:
    image: ${KONG_IMAGE:-kong:latest}
    container_name: ${MIGRATIONS_CONTAINER_NAME:-kong-migrations}
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: kong
      #KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
    networks:
      - kong-net
    restart: on-failure
  
  # kong-migrations:
  #   image: ${KONG_IMAGE:-kong:latest}
  #   container_name: ${MIGRATIONS_CONTAINER_NAME:-kong-migrations}
  #   command: kong migrations up && kong migrations finish
  #   depends_on:
  #     - db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: db
  #     KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  #     KONG_PG_USER: ${KONG_PG_USER:-kong}
  #     KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
  #     KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
  #   secrets:
  #     - kong_postgres_password
  #   networks:
  #     - kong-net
  #   restart: on-failure

  kong-cp:
    image: ${KONG_IMAGE:-kong:latest}
    container_name: ${CP_CONTAINER_NAME:-kong-cp}
    user: ${KONG_USER:-kong}
    depends_on:
      db:
        condition: service_healthy
    volumes: 
      - ./ssl-certs:/tmp/ssl/customcerts  
      - ./kgo:/tmp/license
    environment:    
      #General configuration
      #KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_LICENSE_PATH: "/tmp/license/demo-license.trueability.json"
      KONG_ENFORCE_RBAC: ${KONG_ENFORCE_RBAC:-off}
      #Control Plane configuration
      KONG_ROLE: control_plane
      KONG_CLUSTER_CERT: /tmp/ssl/customcerts/hybrid/cluster.crt
      KONG_CLUSTER_CERT_KEY: /tmp/ssl/customcerts/hybrid/cluster.key
      KONG_PROXY_LISTEN: "off"
      ##KONG_PG_MAX_CONCURRENT_QUERIES: 5
      #Database configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: db
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: kong
      KONG_PG_MAX_CONCURRENT_QUERIES: 5
      #Logging configuration
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_GUI_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_GUI_ERROR_LOG: /dev/stderr
      KONG_PORTAL_API_ACCESS_LOG: /dev/stdout
      KONG_PORTAL_API_ERROR_LOG: /dev/stderr
      KONG_PORTAL_GUI_ACCESS_LOG: /dev/stdout
      KONG_PORTAL_GUI_ERROR_LOG: /dev/stderr
      KONG_STATUS_ACCESS_LOG: /dev/stdout
      KONG_STATUS_ERROR_LOG: /dev/stderr
      ##KONG_AUDIT_LOG: "on"
      ##KONG_ANONYMOUS_REPORTS: "off"
      KONG_LOG_LEVEL: "debug"
      KONG_VITALS: "on"
      #Listener configration
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN:-0.0.0.0:8001}
      KONG_ADMIN_GUI_LISTEN: ${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}
      KONG_PORTAL_GUI_LISTEN: ${KONG_PORTAL_GUI_LISTEN:-0.0.0.0:8003}
      KONG_PORTAL_API_LISTEN: ${KONG_PORTAL_API_LISTEN:-0.0.0.0:8004}
      KONG_STATUS_LISTEN: ${KONG_STATUS_LISTEN:-0.0.0.0:8100}
      KONG_CLUSTER_LISTEN: ${KONG_CLUSTER_LISTEN:-0.0.0.0:8005}
      KONG_CLUSTER_TELEMETRY_LISTEN: ${KONG_CLUSTER_TELEMETRY_LISTEN:-0.0.0.0:8006}
      #Admin API and Manager port configuration
      KONG_ADMIN_API_URI: ${KONG_ADMIN_API_URI:-http://localhost:8001}
      KONG_ADMIN_GUI_URL: ${KONG_ADMIN_GUI_URL:-http://localhost:8002}    
      
      #Portal configuration
      KONG_PORTAL: ${KONG_PORTAL:-"on"}
      KONG_PORTAL_IS_LEGACY: "off"
      KONG_PORTAL_GUI_PROTOCOL: ${KONG_PORTAL_GUI_PROTOCOL:-http}
      KONG_PORTAL_GUI_HOST: ${KONG_PORTAL_GUI_HOST:-localhost:8003} 
      KONG_PORTAL_API_URI: ${KONG_PORTAL_GUI_HOST:-localhost:8004}
    ports:
      - "8001:8001/tcp"
      - "8002:8002/tcp"
      - "8003:8003/tcp"
      - "8004:8004/tcp"
      - "8005:8005/tcp"
      - "8006:8006/tcp"
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure   
  
  kong-dp:
    image: ${KONG_IMAGE:-kong:latest}
    container_name: ${DP_CONTAINER_NAME:-kong-dp}
    user: ${KONG_USER:-kong}
    depends_on:
      kong-cp:
        condition: service_healthy
    volumes: 
      - ./ssl-certs:/tmp/ssl/customcerts  
    environment:    
      #General configuration
      #KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
      KONG_TRUSTED_IPS: "0.0.0.0/0"
      KONG_REAL_IP_HEADER: "X-Forwarded-For"
      KONG_REAL_IP_RECURSIVE: "on"
      #Data Plane configuration
      KONG_ROLE: data_plane
      KONG_CLUSTER_CERT: /tmp/ssl/customcerts/hybrid/cluster.crt
      KONG_CLUSTER_CERT_KEY: /tmp/ssl/customcerts/hybrid/cluster.key
      KONG_LUA_SSL_TRUSTED_CERTIFICATE: /tmp/ssl/customcerts/hybrid/cluster.crt
      KONG_CLUSTER_CONTROL_PLANE: kong-cp:8005
      KONG_CLUSTER_TELEMETRY_ENDPOINT: kong-cp:8006
      #Database configuration
      KONG_DATABASE: "off"
      #Logging configuration
      KONG_LOG_LEVEL: debug
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ANONYMOUS_REPORTS: "off"
      #Listener configration
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN:-0.0.0.0:8000}    
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN:-0.0.0.0:8001} 
      KONG_STATUS_LISTEN: ${KONG_STATUS_LISTEN:-0.0.0.0:8100}
    ports:
      - "8000:8000/tcp"

    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure  
  
  db:
    image: ${PG_DB_IMAGE:-postgres:13.1} 
    container_name: ${DB_CONTAINER_NAME:-kong-db}
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: kong
    ports:
        - "5432:5432/tcp"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net

  deck:
    networks:
      - kong-net
    image: kong/deck:v1.11.0
    container_name: deck
    volumes:
        - ./deck:/tmp/deck
    environment:
        DECK_ANALYTICS: "off"
        DECK_KONG_ADDR: "http://kong-cp:8001"
    depends_on:
      kong-cp:
        condition: service_healthy
      kong-dp:
        condition: service_healthy
    entrypoint: >
      sh -c "/usr/local/bin/deck sync -s /tmp/deck/setup/26-kga-pmcqa-env-setup-deck.yaml;
            /usr/local/bin/deck sync -s /tmp/deck/setup/03-kga-pbta-setup-deck.yaml;"
  
  httpbin.local:
    image: "kennethreitz/httpbin"
    container_name: httpbin.local
    networks:
      - kong-net
#    ports:
#      - "80:80/tcp"
